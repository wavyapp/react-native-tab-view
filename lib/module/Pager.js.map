{"version":3,"names":["React","StyleSheet","TextInput","Keyboard","I18nManager","InteractionManager","PanGestureHandler","State","Animated","Easing","memoize","Clock","Value","onChange","and","or","abs","add","block","call","ceil","clockRunning","cond","divide","eq","event","floor","greaterThan","lessThan","max","min","multiply","neq","not","round","set","spring","startClock","stopClock","sub","timing","PagerContext","createContext","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","SWIPE_VELOCITY_IMPACT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","SPRING_VELOCITY_SCALE","TIMING_CONFIG","duration","easing","out","cubic","Pager","Component","constructor","args","_defineProperty","enabled","childPanGestureHandlerRefs","addGestureHandlerRef","ref","state","includes","mounted","setState","prevState","createRef","UNDETERMINED","props","navigationState","index","layout","width","routes","length","swipeVelocityImpact","undefined","springVelocityScale","layoutWidth","progress","springConfig","timingConfig","isSwipeGesture","setValue","nextIndex","key","keyboardDismissMode","onIndexChange","findIndex","route","jumpToIndex","dismiss","type","listener","enterListeners","push","indexOf","splice","value","Math","forEach","toValue","frameTime","position","time","finished","clock","isRTL","initialVelocityForSpring","velocityX","velocity","gestureX","nativeEvent","translationX","gestureState","gesturesEnabled","routesLength","toggleEnabled","currentIndexValue","pendingIndexValue","forceUpdate","lastEnteredIndex","handleEnteredIndexChange","isSwiping","indexAtSwipeEnd","currentIndex","onSwipeStart","onSwipeEnd","interactionHandle","createInteractionHandle","input","currentlyFocusedInput","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","clearInteractionHandle","focusTextInput","ACTIVE","maybeCancel","offsetX","transitionTo","extrapolatedPosition","translateX","componentDidMount","context","gestureHandlerRef","componentDidUpdate","prevProps","componentWillUnmount","render","swipeEnabled","children","removeClippedSubviews","gestureHandlerProps","getTranslateX","addListener","removeListener","jumpTo","createElement","_extends","simultaneousHandlers","waitFor","onGestureEvent","handleGestureEvent","onHandlerStateChange","activeOffsetX","failOffsetY","View","style","styles","container","transform","Provider","providerVal","create","flex","flexDirection"],"sources":["Pager.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  Keyboard,\n  I18nManager,\n  InteractionManager,\n} from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport memoize from './memoize';\n\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  Listener,\n  PagerCommonProps,\n  EventEmitterProps,\n} from './types';\n\ntype Binary = 0 | 1;\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  layout: Layout;\n  // Clip unfocused views to improve memory usage\n  // Don't enable this on iOS where this is buggy and views don't re-appear\n  removeClippedSubviews?: boolean;\n  children: (\n    props: EventEmitterProps & {\n      // Animated value which represents the state of current index\n      // It can include fractional digits as it represents the intermediate value\n      position: Animated.Node<number>;\n      // Function to actually render the content of the pager\n      // The parent component takes care of rendering\n      render: (children: React.ReactNode) => React.ReactNode;\n      // Callback to call when switching the tab\n      // The tab switch animation is performed even if the index in state is unchanged\n      jumpTo: (key: string) => void;\n    }\n  ) => React.ReactNode;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype ComponentState = {\n  enabled: boolean;\n  childPanGestureHandlerRefs: React.RefObject<PanGestureHandler>[];\n};\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  and,\n  or,\n  abs,\n  add,\n  block,\n  call,\n  ceil,\n  clockRunning,\n  cond,\n  divide,\n  eq,\n  event,\n  floor,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  not,\n  round,\n  set,\n  spring,\n  startClock,\n  stopClock,\n  sub,\n  timing,\n} = Animated;\n\nconst PagerContext = React.createContext({});\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 20;\n\nconst SWIPE_VELOCITY_IMPACT = 0.2;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst SPRING_VELOCITY_SCALE = 1;\n\nconst TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic),\n};\n\nexport default class Pager<T extends Route> extends React.Component<\n  Props<T>,\n  ComponentState\n> {\n  static defaultProps = {\n    swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n    springVelocityScale: SPRING_VELOCITY_SCALE,\n  };\n\n  state = {\n    enabled: true,\n    childPanGestureHandlerRefs: [] as React.RefObject<PanGestureHandler>[],\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n\n    // Register this PanGestureHandler with the parent (if parent exists)\n    // in order to coordinate gestures between handlers.\n    if (this.context && this.context.addGestureHandlerRef) {\n      this.context.addGestureHandlerRef(this.gestureHandlerRef);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const {\n      navigationState,\n      layout,\n      swipeVelocityImpact,\n      springVelocityScale,\n      springConfig,\n      timingConfig,\n    } = this.props;\n    const { index, routes } = navigationState;\n\n    if (\n      // Check for index in state to avoid unintended transition if component updates during swipe\n      (index !== prevProps.navigationState.index &&\n        index !== this.currentIndexValue) ||\n      // Check if the user updated the index correctly after an update\n      (typeof this.pendingIndexValue === 'number' &&\n        index !== this.pendingIndexValue)\n    ) {\n      // Index in user's state is different from the index being tracked\n      this.jumpToIndex(index);\n    }\n\n    // Reset the pending index\n    this.pendingIndexValue = undefined;\n\n    // Update our mappings of animated nodes when props change\n    if (prevProps.navigationState.routes.length !== routes.length) {\n      this.routesLength.setValue(routes.length);\n    }\n\n    if (prevProps.layout.width !== layout.width) {\n      this.progress.setValue(-index * layout.width);\n      this.layoutWidth.setValue(layout.width);\n    }\n\n    if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n      this.swipeVelocityImpact.setValue(\n        swipeVelocityImpact !== undefined\n          ? swipeVelocityImpact\n          : SWIPE_VELOCITY_IMPACT\n      );\n    }\n\n    if (prevProps.springVelocityScale !== springVelocityScale) {\n      this.springVelocityScale.setValue(\n        springVelocityScale !== undefined\n          ? springVelocityScale\n          : SPRING_VELOCITY_SCALE\n      );\n    }\n\n    if (prevProps.springConfig !== springConfig) {\n      this.springConfig.damping.setValue(\n        springConfig.damping !== undefined\n          ? springConfig.damping\n          : SPRING_CONFIG.damping\n      );\n\n      this.springConfig.mass.setValue(\n        springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass\n      );\n\n      this.springConfig.stiffness.setValue(\n        springConfig.stiffness !== undefined\n          ? springConfig.stiffness\n          : SPRING_CONFIG.stiffness\n      );\n\n      this.springConfig.restSpeedThreshold.setValue(\n        springConfig.restSpeedThreshold !== undefined\n          ? springConfig.restSpeedThreshold\n          : SPRING_CONFIG.restSpeedThreshold\n      );\n\n      this.springConfig.restDisplacementThreshold.setValue(\n        springConfig.restDisplacementThreshold !== undefined\n          ? springConfig.restDisplacementThreshold\n          : SPRING_CONFIG.restDisplacementThreshold\n      );\n    }\n\n    if (prevProps.timingConfig !== timingConfig) {\n      this.timingConfig.duration.setValue(\n        timingConfig.duration !== undefined\n          ? timingConfig.duration\n          : TIMING_CONFIG.duration\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  mounted = false;\n\n  static contextType = PagerContext;\n\n  // Mechanism to add child PanGestureHandler refs in the case that this\n  // Pager is a parent to child Pagers. Allows for coordination between handlers\n  private providerVal = {\n    addGestureHandlerRef: (ref: React.RefObject<PanGestureHandler>) => {\n      if (\n        !this.state.childPanGestureHandlerRefs.includes(ref) &&\n        this.mounted\n      ) {\n        this.setState((prevState: ComponentState) => ({\n          childPanGestureHandlerRefs: [\n            ...prevState.childPanGestureHandlerRefs,\n            ref,\n          ],\n        }));\n      }\n    },\n  };\n\n  // PanGestureHandler ref used for coordination with parent handlers\n  private gestureHandlerRef: React.RefObject<\n    PanGestureHandler\n  > = React.createRef();\n\n  // Clock used for tab transition animations\n  private clock = new Clock();\n\n  // Current state of the gesture\n  private velocityX = new Value(0);\n  private gestureX = new Value(0);\n  private gestureState = new Value(State.UNDETERMINED);\n  private offsetX = new Value(0);\n\n  // Tracks current state of gesture handler enabled\n  private gesturesEnabled = new Value(1);\n\n  // Current progress of the page (translateX value)\n  private progress = new Value(\n    // Initial value is based on the index and page width\n    this.props.navigationState.index * this.props.layout.width * DIRECTION_RIGHT\n  );\n\n  // Initial index of the tabs\n  private index = new Value(this.props.navigationState.index);\n\n  // Next index of the tabs, updated for navigation from outside (tab press, state update)\n  private nextIndex: Animated.Value<number> = new Value(UNSET);\n\n  // Scene that was last entered\n  private lastEnteredIndex = new Value(this.props.navigationState.index);\n\n  // Whether the user is currently dragging the screen\n  private isSwiping: Animated.Value<Binary> = new Value(FALSE);\n\n  // Whether the update was due to swipe gesture\n  // This controls whether the transition will use a spring or timing animation\n  // Remember to set it before transition needs to occur\n  private isSwipeGesture: Animated.Value<Binary> = new Value(FALSE);\n\n  // Track the index value when a swipe gesture has ended\n  // This lets us know if a gesture end triggered a tab switch or not\n  private indexAtSwipeEnd: Animated.Value<number> = new Value(\n    this.props.navigationState.index\n  );\n\n  // Mappings to some prop values\n  // We use them in animation calculations, so we need live animated nodes\n  private routesLength = new Value(this.props.navigationState.routes.length);\n  private layoutWidth = new Value(this.props.layout.width);\n\n  // Determines how relevant is a velocity while calculating next position while swiping\n  private swipeVelocityImpact = new Value(\n    this.props.swipeVelocityImpact !== undefined\n      ? this.props.swipeVelocityImpact\n      : SWIPE_VELOCITY_IMPACT\n  );\n\n  private springVelocityScale = new Value(\n    this.props.springVelocityScale !== undefined\n      ? this.props.springVelocityScale\n      : SPRING_VELOCITY_SCALE\n  );\n\n  // The position value represent the position of the pager on a scale of 0 - routes.length-1\n  // It is calculated based on the translate value and layout width\n  // If we don't have the layout yet, we should return the current index\n  private position = cond(\n    this.layoutWidth,\n    divide(multiply(this.progress, -1), this.layoutWidth),\n    this.index\n  );\n\n  // Animation configuration\n  private springConfig = {\n    damping: new Value(\n      this.props.springConfig.damping !== undefined\n        ? this.props.springConfig.damping\n        : SPRING_CONFIG.damping\n    ),\n    mass: new Value(\n      this.props.springConfig.mass !== undefined\n        ? this.props.springConfig.mass\n        : SPRING_CONFIG.mass\n    ),\n    stiffness: new Value(\n      this.props.springConfig.stiffness !== undefined\n        ? this.props.springConfig.stiffness\n        : SPRING_CONFIG.stiffness\n    ),\n    restSpeedThreshold: new Value(\n      this.props.springConfig.restSpeedThreshold !== undefined\n        ? this.props.springConfig.restSpeedThreshold\n        : SPRING_CONFIG.restSpeedThreshold\n    ),\n    restDisplacementThreshold: new Value(\n      this.props.springConfig.restDisplacementThreshold !== undefined\n        ? this.props.springConfig.restDisplacementThreshold\n        : SPRING_CONFIG.restDisplacementThreshold\n    ),\n  };\n\n  private timingConfig = {\n    duration: new Value(\n      this.props.timingConfig.duration !== undefined\n        ? this.props.timingConfig.duration\n        : TIMING_CONFIG.duration\n    ),\n  };\n\n  // The reason for using this value instead of simply passing `this._velocity`\n  // into a spring animation is that we need to reverse it if we're using RTL mode.\n  // Also, it's not possible to pass multiplied value there, because\n  // value passed to STATE of spring (the first argument) has to be Animated.Value\n  // and it's not allowed to pass other nodes there. The result of multiplying is not an\n  // Animated.Value. So this value is being updated on each start of spring animation.\n  private initialVelocityForSpring = new Value(0);\n\n  // The current index change caused by the pager's animation\n  // The pager is used as a controlled component\n  // We need to keep track of the index to determine when to trigger animation\n  // The state will change at various points, we should only respond when we are out of sync\n  // This will ensure smoother animation and avoid weird glitches\n  private currentIndexValue = this.props.navigationState.index;\n\n  // The pending index value as result of state update caused by swipe gesture\n  // We need to set it when state changes from inside this component\n  // It also needs to be reset right after componentDidUpdate fires\n  private pendingIndexValue: number | undefined = undefined;\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n\n  // Listeners for the entered screen\n  private enterListeners: Listener[] = [];\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private jumpToIndex = (index: number) => {\n    // If the index changed, we need to trigger a tab switch\n    this.isSwipeGesture.setValue(FALSE);\n    this.nextIndex.setValue(index);\n  };\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    // A tab switch might occur when we're in the middle of a transition\n    // In that case, the index might be same as before\n    // So we conditionally make the pager to update the position\n    if (navigationState.index === index) {\n      this.jumpToIndex(index);\n    } else {\n      onIndexChange(index);\n\n      // When the index changes, the focused input will no longer be in current tab\n      // So we should dismiss the keyboard\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private handleEnteredIndexChange = ([value]: readonly number[]) => {\n    const index = Math.max(\n      0,\n      Math.min(value, this.props.navigationState.routes.length - 1)\n    );\n\n    this.enterListeners.forEach((listener) => listener(index));\n  };\n\n  private transitionTo = (index: Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.progress,\n      time: new Value(0),\n      finished: new Value(FALSE),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(index, this.layoutWidth, DIRECTION_RIGHT)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(this.index, index),\n      ]),\n      cond(\n        this.isSwipeGesture,\n        // Animate the values with a spring for swipe\n        [\n          cond(\n            not(clockRunning(this.clock)),\n            I18nManager.isRTL\n              ? set(\n                  this.initialVelocityForSpring,\n                  multiply(-1, this.velocityX, this.springVelocityScale)\n                )\n              : set(\n                  this.initialVelocityForSpring,\n                  multiply(this.velocityX, this.springVelocityScale)\n                )\n          ),\n          spring(\n            this.clock,\n            { ...state, velocity: this.initialVelocityForSpring },\n            { ...SPRING_CONFIG, ...this.springConfig, toValue }\n          ),\n        ],\n        // Otherwise use a timing animation for faster switching\n        timing(\n          this.clock,\n          { ...state, frameTime },\n          { ...TIMING_CONFIG, ...this.timingConfig, toValue }\n        )\n      ),\n      cond(not(clockRunning(this.clock)), startClock(this.clock)),\n      cond(state.finished, [\n        // Reset values\n        set(this.isSwipeGesture, FALSE),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n      ]),\n    ]);\n  };\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  private extrapolatedPosition = add(\n    this.gestureX,\n    multiply(this.velocityX, this.swipeVelocityImpact)\n  );\n\n  private toggleEnabled = () => {\n    if (this.state.enabled && this.mounted)\n      this.setState({ enabled: false }, () => {\n        this.setState({ enabled: true });\n      });\n  };\n\n  // Cancel gesture if swiping back from the initial tab or forward from the last tab.\n  // Enables parent Pager to pick up the gesture if one exists.\n  private maybeCancel = block([\n    cond(\n      and(\n        this.gesturesEnabled,\n        or(\n          and(\n            eq(this.index, sub(this.routesLength, 1)),\n            lessThan(this.gestureX, 0)\n          ),\n          and(eq(this.index, 0), greaterThan(this.gestureX, 0))\n        )\n      ),\n      set(this.gesturesEnabled, 0)\n    ),\n  ]);\n\n  private translateX = block([\n    onChange(\n      this.gesturesEnabled,\n      cond(\n        not(this.gesturesEnabled),\n        call([this.gesturesEnabled], this.toggleEnabled)\n      )\n    ),\n    onChange(\n      this.index,\n      call([this.index], ([value]) => {\n        this.currentIndexValue = value;\n        // Without this check, the pager can go to an infinite update <-> animate loop for sync updates\n        if (value !== this.props.navigationState.index) {\n          // If the index changed, and previous animation has finished, update state\n          this.props.onIndexChange(value);\n\n          this.pendingIndexValue = value;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          if (this.mounted) {\n            this.forceUpdate();\n          }\n        }\n      })\n    ),\n    onChange(\n      this.position,\n      // Listen to updates in the position to detect when we enter a screen\n      // This is useful for things such as lazy loading when index change will fire too late\n      cond(\n        I18nManager.isRTL\n          ? lessThan(this.gestureX, 0)\n          : greaterThan(this.gestureX, 0),\n        // Based on the direction of the gesture, determine if we're entering the previous or next screen\n        cond(neq(floor(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, floor(this.position)),\n          call([floor(this.position)], this.handleEnteredIndexChange),\n        ]),\n        cond(neq(ceil(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, ceil(this.position)),\n          call([ceil(this.position)], this.handleEnteredIndexChange),\n        ])\n      )\n    ),\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      [\n        cond(not(this.isSwiping), set(this.gesturesEnabled, 1)),\n        call(\n          [this.isSwiping, this.indexAtSwipeEnd, this.index],\n          ([isSwiping, indexAtSwipeEnd, currentIndex]: readonly number[]) => {\n            const {\n              keyboardDismissMode,\n              onSwipeStart,\n              onSwipeEnd,\n            } = this.props;\n\n            if (isSwiping === TRUE) {\n              onSwipeStart?.();\n              this.interactionHandle = InteractionManager.createInteractionHandle();\n\n              if (keyboardDismissMode === 'auto') {\n                // @ts-ignore: the method is only available in newer React Native, but types aren't up-to-date\n                const input = TextInput.State.currentlyFocusedInput\n                  ? // @ts-ignore\n                    TextInput.State.currentlyFocusedInput()\n                  : TextInput.State.currentlyFocusedField();\n\n                // When a gesture begins, blur the currently focused input\n                TextInput.State.blurTextInput(input);\n\n                // Store the id of this input so we can refocus it if gesture was cancelled\n                this.previouslyFocusedTextInput = input;\n              } else if (keyboardDismissMode === 'on-drag') {\n                Keyboard.dismiss();\n              }\n            } else {\n              onSwipeEnd?.();\n\n              if (this.interactionHandle !== null) {\n                InteractionManager.clearInteractionHandle(\n                  this.interactionHandle\n                );\n              }\n\n              if (keyboardDismissMode === 'auto') {\n                if (indexAtSwipeEnd === currentIndex) {\n                  // The index didn't change, we should restore the focus of text input\n                  const input = this.previouslyFocusedTextInput;\n\n                  if (input) {\n                    TextInput.State.focusTextInput(input);\n                  }\n                }\n\n                this.previouslyFocusedTextInput = null;\n              }\n            }\n          }\n        ),\n      ]\n    ),\n    onChange(\n      this.nextIndex,\n      cond(neq(this.nextIndex, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        set(this.gestureX, 0),\n        // Update the index to trigger the transition\n        set(this.index, this.nextIndex),\n        set(this.nextIndex, UNSET),\n      ])\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        this.maybeCancel,\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          set(this.isSwipeGesture, TRUE),\n          // Also update the drag offset to the last progress\n          set(this.offsetX, this.progress),\n        ]),\n        // Update progress with previous offset + gesture distance\n        set(\n          this.progress,\n          I18nManager.isRTL\n            ? sub(this.offsetX, this.gestureX)\n            : add(this.offsetX, this.gestureX)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.indexAtSwipeEnd, this.index),\n        this.transitionTo(\n          cond(\n            and(\n              // We should consider velocity and gesture distance only when a swipe ends\n              // The gestureX value will be non-zero when swipe has happened\n              // We check against a minimum distance instead of 0 because `activeOffsetX` doesn't seem to be respected on Android\n              // For other factors such as state update, the velocity and gesture distance don't matter\n              greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n              greaterThan(\n                abs(this.extrapolatedPosition),\n                divide(this.layoutWidth, 2)\n              )\n            ),\n            // For swipe gesture, to calculate the index, determine direction and add to index\n            // When the user swipes towards the left, we transition to the next tab\n            // When the user swipes towards the right, we transition to the previous tab\n            round(\n              min(\n                max(\n                  0,\n                  sub(\n                    this.index,\n                    cond(\n                      greaterThan(this.extrapolatedPosition, 0),\n                      I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT,\n                      I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT\n                    )\n                  )\n                ),\n                sub(this.routesLength, 1)\n              )\n            ),\n            // Index didn't change/changed due to state update\n            this.index\n          )\n        ),\n      ]\n    ),\n    this.progress,\n  ]);\n\n  private getTranslateX = memoize(\n    (\n      layoutWidth: Animated.Node<number>,\n      routesLength: Animated.Node<number>,\n      translateX: Animated.Node<number>\n    ) =>\n      multiply(\n        // Make sure that the translation doesn't exceed the bounds to prevent overscrolling\n        min(\n          max(\n            multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT),\n            translateX\n          ),\n          0\n        ),\n        I18nManager.isRTL ? -1 : 1\n      )\n  );\n\n  render() {\n    const {\n      layout,\n      navigationState,\n      swipeEnabled,\n      children,\n      removeClippedSubviews,\n      gestureHandlerProps,\n    } = this.props;\n\n    const translateX = this.getTranslateX(\n      this.layoutWidth,\n      this.routesLength,\n      this.translateX\n    );\n\n    return children({\n      position: this.position,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: (children) => (\n        <PanGestureHandler\n          ref={this.gestureHandlerRef}\n          simultaneousHandlers={this.state.childPanGestureHandlerRefs}\n          waitFor={this.state.childPanGestureHandlerRefs}\n          enabled={layout.width !== 0 && swipeEnabled && this.state.enabled}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureEvent}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            removeClippedSubviews={removeClippedSubviews}\n            style={[\n              styles.container,\n              layout.width\n                ? {\n                    width: layout.width * navigationState.routes.length,\n                    transform: [{ translateX }] as any,\n                  }\n                : null,\n            ]}\n          >\n            <PagerContext.Provider value={this.providerVal}>\n              {children}\n            </PagerContext.Provider>\n          </Animated.View>\n        </PanGestureHandler>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"],"mappings":"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","ignoreList":[]}